@using Blazor.Blog.Shared.Enum

@inject HttpClient httpClient
@inject NavigationManager uriHelper

<div class="px-4 pt-4 flex flex-wrap">
    @if (pagingModel != null && pagingModel.ArticleIntroductions != null)
        foreach (var item in pagingModel.ArticleIntroductions)
        {
            <Article_Introduction Introduction="item"></Article_Introduction>
        }
</div>

<Paging PagingModel="pagingModel" OnPagingChangeEvent="PageChanged"></Paging>

@code {
    [Parameter]
    public ArticleTypeEnum type { get; set; }

    [Parameter]
    public int? Page { get; set; }

    private PagingModel pagingModel { get; set; } = new PagingModel
        {
            Page = 1,
        };

    public async Task PageChanged(string page)
    {
        var response = await httpClient.GetAsync($"/Api/Article/{type.ToString()}?{nameof(page)}={page}");

        if (!response.IsSuccessStatusCode)
            return;

        var model = await response.Content.ReadFromJsonAsync<PagingModel>();

        if (model == null)
            return;

        pagingModel = model;
        uriHelper.NavigateTo($"/{type.ToString()}?{nameof(page)}={page}");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        pagingModel.Page = Page ?? 1;

        var response = await httpClient.GetAsync($"/Api/Article/{type.ToString()}?{nameof(pagingModel.Page).ToLower()}={pagingModel?.Page}");

        if (!response.IsSuccessStatusCode)
            return;

        var model = await response.Content.ReadFromJsonAsync<PagingModel>();

        if (model == null)
            return;

        pagingModel = model;
    }
}
