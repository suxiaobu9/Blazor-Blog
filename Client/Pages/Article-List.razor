@using Blazor.Blog.Shared.Enum
@using Blazor.Blog.Client.State
@using Microsoft.AspNetCore.WebUtilities

@inject HttpClient httpClient
@inject NavigationManager uriHelper
@inject KeywordSearchState keywordSearchState
@implements IDisposable

<div class="flex justify-center mt-4 md:hidden block">
    <KeywordSearch></KeywordSearch>
</div>

<div class="px-4 pt-4 flex flex-wrap">
    @if (pagingModel != null && pagingModel.ArticleIntroductions != null)
        foreach (var item in pagingModel.ArticleIntroductions)
        {
            <Article_Introduction Introduction="item"></Article_Introduction>
        }
</div>

<Paging PagingModel="pagingModel" OnPagingChangeEvent="PageChanged"></Paging>

@code {
    [Parameter]
    public ArticleTypeEnum type { get; set; }

    private PagingModel pagingModel { get; set; } = new PagingModel();

    public async Task PageChanged(int page)
    {
        pagingModel.Page = page;
        await GetArticleList(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var uri = uriHelper.ToAbsoluteUri(uriHelper.Uri);

        // 因為這邊沒掛路由，所以這樣取 query string
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(pagingModel.Page), out var _page))
            pagingModel.Page = Convert.ToInt32(_page);
        else
            pagingModel.Page = 1;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(keywordSearchState.Keyword), out var _keyword))
            keywordSearchState.SetKeyword(_keyword);

        keywordSearchState.OnChange += (async () => await GetArticleList(true));
        keywordSearchState.OnChange += StateHasChanged;

        await GetArticleList(false);
    }

    // 取得文章列表
    private async Task GetArticleList(bool isFromSearch)
    {
        // 如果是從關鍵字搜尋來的，就強制導回第一頁
        if (isFromSearch)
            pagingModel.Page = 1;

        var queryStringDic = new Dictionary<string, object>();

        if (pagingModel.Page != null && pagingModel.Page != 1)
        {
            queryStringDic.Add(nameof(pagingModel.Page), pagingModel.Page ?? 1);
        }

        if (!string.IsNullOrWhiteSpace(keywordSearchState.Keyword))
        {
            queryStringDic.Add(nameof(keywordSearchState.Keyword), keywordSearchState.Keyword);
        }

        var queryString = "";

        if (queryStringDic.Any())
            queryString = "?" + string.Join("&", queryStringDic.Select(x => $"{x.Key}={x.Value}").ToArray() ?? Array.Empty<string>());

        // 取文章列表
        var url = $"/Api/ArticleIntroductionList/{type.ToString()}{queryString}";

        var response = await httpClient.GetAsync(url);

        var typeString = type == ArticleTypeEnum.Technology ? "" : ("/" + type.ToString());

        if (!response.IsSuccessStatusCode)
        {
            uriHelper.NavigateTo($"{typeString}", true);
            return;
        }

        var model = await response.Content.ReadFromJsonAsync<PagingModel>();

        if (model == null)
            return;

        pagingModel = model;

        uriHelper.NavigateTo($"{typeString}{queryString}");

        StateHasChanged();
    }

    public void Dispose()
    {
        keywordSearchState.OnChange -= (async () => await GetArticleList(true));
        keywordSearchState.OnChange -= StateHasChanged;
    }
}
