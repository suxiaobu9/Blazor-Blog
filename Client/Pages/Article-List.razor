@using Blazor.Blog.Shared.Enum
@using Blazor.Blog.Client.State
@using Microsoft.AspNetCore.WebUtilities

@inject HttpClient httpClient
@inject NavigationManager uriHelper
@inject KeywordSearchState keywordSearchState
@implements IDisposable

<div class="flex justify-center mt-4 md:hidden block">
    <KeywordSearch></KeywordSearch>
</div>

<div class="p-4 flex flex-wrap">
    @if (pagingModel != null && pagingModel.ArticleIntroductions != null)
        foreach (var item in pagingModel.ArticleIntroductions)
        {
            <Article_Introduction Introduction="item"></Article_Introduction>
        }
</div>

<Paging PagingModel="pagingModel" OnPagingChangeEvent="PageChanged"></Paging>

@code {
    [Parameter]
    public ArticleTypeEnum Type { get; set; }

    [Parameter]
    public int? CurrentPage { get; set; }

    [Parameter]
    public string? Keyword { get; set; }

    private PagingModel pagingModel { get; set; } = new PagingModel();

    public void PageChanged(int page)
    {
        pagingModel.CurrentPage = page;

        var type = Type == ArticleTypeEnum.Technology ? "" : Type.ToString();
        var queryString = GetNavigateToUrlQueryString();

        uriHelper.NavigateTo($"/{type}{queryString}");
    }

    protected override async Task OnParametersSetAsync()
    {
        pagingModel.CurrentPage = CurrentPage;
        keywordSearchState.SetKeyword(Keyword);

        await GetArticleListAsync();
        await base.OnParametersSetAsync();
    }

    protected override Task OnInitializedAsync()
    {
        keywordSearchState.OnChange += SetKeyword;
        return base.OnInitializedAsync();
    }

    private void SetKeyword()
    {
        // 處理換業
        if (Keyword != keywordSearchState.Keyword)
        {
            Keyword = keywordSearchState.Keyword;
            pagingModel.CurrentPage = 1;
        }

        var type = Type == ArticleTypeEnum.Technology ? "" : Type.ToString();

        var queryString = GetNavigateToUrlQueryString();

        uriHelper.NavigateTo($"/{type}{queryString}");
    }

    private async Task GetArticleListAsync()
    {
        var queryString = GetNavigateToUrlQueryString();

        // 取文章列表
        var url = $"/Api/ArticleIntroductionList/{Type.ToString()}{queryString}";

        var response = await httpClient.GetAsync(url);

        var typeString = Type == ArticleTypeEnum.Technology ? "" : ("/" + Type.ToString());

        if (!response.IsSuccessStatusCode)
        {
            uriHelper.NavigateTo($"{typeString}", true);
            return;
        }

        var model = await response.Content.ReadFromJsonAsync<PagingModel>();

        if (model == null)
            return;

        pagingModel = model;
    }

    private string GetNavigateToUrlQueryString(int? page = null, string? keyword = null)
    {
        var queryStringDic = new Dictionary<string, object>();

        if (pagingModel.CurrentPage != null && pagingModel.CurrentPage != 1)
        {
            queryStringDic.Add(nameof(pagingModel.CurrentPage), pagingModel.CurrentPage ?? 1);
        }

        if (!string.IsNullOrWhiteSpace(Keyword))
        {
            queryStringDic.Add(nameof(Keyword), Keyword);
        }

        var queryString = "";

        if (queryStringDic.Any())
            queryString = "?" + string.Join("&", queryStringDic.Select(x => $"{x.Key}={x.Value}").ToArray() ?? Array.Empty<string>());

        return queryString;
    }

    public void Dispose()
    {
        keywordSearchState.OnChange -= SetKeyword;
    }
}
